/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.Exercicio;
import control.ExpressionTree;
import control.Tutor;
import java.awt.CardLayout;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.Atividade;
import model.AtividadeDAO;
import model.Complexidade;
import model.ComplexidadeDAO;
import model.Perfil;
import model.Solucao;
import model.SolucaoDAO;

/**
 *
 * @author igorfonseca
 */
public class jfPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form jfPrincipal
     */
    public jfPrincipal() {

        initComponents();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        
        // Oculta menus com funcionalidades não implementadas
        jmConfig.setVisible(false);
        miGuia.setVisible(false);
        miNovo.setVisible(false);
        
        novoExercicio();
        
        // Configura a tabela
        jtResolucao.getTableHeader().setUI(null);
        jtResolucao.getColumnModel().getColumn(0).setMaxWidth(45);
        jtResolucao.getColumnModel().getColumn(2).setMaxWidth(305);
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment( JLabel.LEFT );
        jtResolucao.getColumnModel().getColumn(1).setCellRenderer( leftRenderer );
        
        // Configura o painel de regras
        jbAplicarRegra.setEnabled(false);
        jbLimparLinhas.setEnabled(false);
        
        // TEST: Lista de feedbacks
        jpListaFeedback.setLayout(new BoxLayout(jpListaFeedback, BoxLayout.Y_AXIS));
        //jpListaFeedback.add(new JLabel("Bem-vindo!"));
        
        // Inicializa variáveis de controle da classe Tutor
        Tutor.initConcluidos();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgSistemaProva = new javax.swing.ButtonGroup();
        jpGeral = new javax.swing.JPanel();
        jpEsquerdo = new javax.swing.JPanel();
        jpResolucao = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtResolucao = new javax.swing.JTable();
        jpAtividade = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jlAtivAtual = new javax.swing.JLabel();
        cardRegras = new javax.swing.JPanel();
        jpRegras = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btIntroConju = new javax.swing.JButton();
        btElimConju = new javax.swing.JButton();
        btIntroDisju = new javax.swing.JButton();
        btElimDisju = new javax.swing.JButton();
        btIntroImpl = new javax.swing.JButton();
        btElimImpl = new javax.swing.JButton();
        btIntroNeg = new javax.swing.JButton();
        btElimNeg = new javax.swing.JButton();
        jbDesfazer = new javax.swing.JButton();
        jbHip = new javax.swing.JButton();
        jpConfigRegra = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jbCancelarRegra = new javax.swing.JButton();
        jlNomeRegra = new javax.swing.JLabel();
        jlLinhasSelecionadas = new javax.swing.JLabel();
        jbAplicarRegra = new javax.swing.JButton();
        jbLimparLinhas = new javax.swing.JButton();
        jpConcluido = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jbProxAtiv = new javax.swing.JButton();
        jbGravarSolucao = new javax.swing.JButton();
        jpFeedback = new javax.swing.JPanel();
        jpFeedbackContainer = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jbRevisar = new javax.swing.JButton();
        jbAjuda = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jpListaFeedback = new javax.swing.JPanel();
        jmMenuSuperior = new javax.swing.JMenuBar();
        jmArquivo = new javax.swing.JMenu();
        miNovo = new javax.swing.JMenuItem();
        miAbrir = new javax.swing.JMenuItem();
        miSalvar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miSair = new javax.swing.JMenuItem();
        jmConfig = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jmSistemaProva = new javax.swing.JMenu();
        miProposicional = new javax.swing.JRadioButtonMenuItem();
        miPredicaodos = new javax.swing.JRadioButtonMenuItem();
        jmAjuda = new javax.swing.JMenu();
        miGuia = new javax.swing.JMenuItem();
        miSobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LogicITS | Tutor de Lógica");
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1020, 640));

        jpGeral.setPreferredSize(new java.awt.Dimension(1010, 615));
        jpGeral.setLayout(new javax.swing.BoxLayout(jpGeral, javax.swing.BoxLayout.X_AXIS));

        jpEsquerdo.setPreferredSize(new java.awt.Dimension(593, 615));
        jpEsquerdo.setLayout(new javax.swing.BoxLayout(jpEsquerdo, javax.swing.BoxLayout.Y_AXIS));

        jpResolucao.setBackground(new java.awt.Color(255, 255, 255));
        jpResolucao.setPreferredSize(new java.awt.Dimension(450, 1000));

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 20)); // NOI18N
        jLabel3.setText("Resolução");

        jtResolucao.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jtResolucao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtResolucao.setFillsViewportHeight(true);
        jtResolucao.setRowHeight(28);
        jtResolucao.setRowSelectionAllowed(false);
        jtResolucao.setShowHorizontalLines(false);
        jtResolucao.setShowVerticalLines(false);
        jScrollPane1.setViewportView(jtResolucao);

        jpAtividade.setBackground(new java.awt.Color(238, 238, 238));
        jpAtividade.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(238, 238, 238), 10, true));

        jLabel2.setBackground(new java.awt.Color(238, 238, 238));
        jLabel2.setFont(new java.awt.Font("Nirmala UI", 0, 28)); // NOI18N
        jLabel2.setText("Atividade");

        jlAtivAtual.setBackground(new java.awt.Color(238, 238, 238));
        jlAtivAtual.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        jlAtivAtual.setText("a -> b");

        javax.swing.GroupLayout jpAtividadeLayout = new javax.swing.GroupLayout(jpAtividade);
        jpAtividade.setLayout(jpAtividadeLayout);
        jpAtividadeLayout.setHorizontalGroup(
            jpAtividadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAtividadeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpAtividadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlAtivAtual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpAtividadeLayout.setVerticalGroup(
            jpAtividadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAtividadeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jlAtivAtual)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpResolucaoLayout = new javax.swing.GroupLayout(jpResolucao);
        jpResolucao.setLayout(jpResolucaoLayout);
        jpResolucaoLayout.setHorizontalGroup(
            jpResolucaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpResolucaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpResolucaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                    .addComponent(jpAtividade, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpResolucaoLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpResolucaoLayout.setVerticalGroup(
            jpResolucaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpResolucaoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpAtividade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addContainerGap())
        );

        jpEsquerdo.add(jpResolucao);

        cardRegras.setPreferredSize(new java.awt.Dimension(100, 200));
        cardRegras.setLayout(new java.awt.CardLayout());

        jpRegras.setBackground(new java.awt.Color(255, 255, 255));
        jpRegras.setPreferredSize(new java.awt.Dimension(720, 300));
        jpRegras.setRequestFocusEnabled(false);

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 20)); // NOI18N
        jLabel1.setText("Regras de inferência");

        btIntroConju.setBackground(new java.awt.Color(6, 158, 79));
        btIntroConju.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btIntroConju.setForeground(new java.awt.Color(255, 255, 255));
        btIntroConju.setText("<html><font face='Roboto'>∧<sub>i</sub></font></html>");
        btIntroConju.setToolTipText("Introdução da conjunção");
        btIntroConju.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIntroConjuActionPerformed(evt);
            }
        });

        btElimConju.setBackground(new java.awt.Color(6, 158, 79));
        btElimConju.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btElimConju.setForeground(new java.awt.Color(255, 255, 255));
        btElimConju.setText("<html><font face='Roboto'>∧<sub>e</sub></font></html>");
        btElimConju.setToolTipText("Eliminação da conjunção");
        btElimConju.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btElimConjuActionPerformed(evt);
            }
        });

        btIntroDisju.setBackground(new java.awt.Color(6, 158, 79));
        btIntroDisju.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btIntroDisju.setForeground(new java.awt.Color(255, 255, 255));
        btIntroDisju.setText("<html>∨<sub>i</sub></html>");
        btIntroDisju.setToolTipText("Introdução da disjunção");
        btIntroDisju.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIntroDisjuActionPerformed(evt);
            }
        });

        btElimDisju.setBackground(new java.awt.Color(6, 158, 79));
        btElimDisju.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btElimDisju.setForeground(new java.awt.Color(255, 255, 255));
        btElimDisju.setText("<html>∨<sub>e</sub></html>");
        btElimDisju.setToolTipText("Eliminação da disjunção");
        btElimDisju.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btElimDisjuActionPerformed(evt);
            }
        });

        btIntroImpl.setBackground(new java.awt.Color(6, 158, 79));
        btIntroImpl.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btIntroImpl.setForeground(new java.awt.Color(255, 255, 255));
        btIntroImpl.setText("<html>→<sub>i</sub></html>");
        btIntroImpl.setToolTipText("Introdução da implicação");
        btIntroImpl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIntroImplActionPerformed(evt);
            }
        });

        btElimImpl.setBackground(new java.awt.Color(6, 158, 79));
        btElimImpl.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btElimImpl.setForeground(new java.awt.Color(255, 255, 255));
        btElimImpl.setText("<html>→<sub>e</sub></html>");
        btElimImpl.setToolTipText("Eliminação da implicação");
        btElimImpl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btElimImplActionPerformed(evt);
            }
        });

        btIntroNeg.setBackground(new java.awt.Color(6, 158, 79));
        btIntroNeg.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btIntroNeg.setForeground(new java.awt.Color(255, 255, 255));
        btIntroNeg.setText("<html>¬<sub>i</sub></html>");
        btIntroNeg.setToolTipText("Introdução da negação");
        btIntroNeg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIntroNegActionPerformed(evt);
            }
        });

        btElimNeg.setBackground(new java.awt.Color(6, 158, 79));
        btElimNeg.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        btElimNeg.setForeground(new java.awt.Color(255, 255, 255));
        btElimNeg.setText("<html>¬<sub>e</sub></html>");
        btElimNeg.setToolTipText("Eliminação da negação");
        btElimNeg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btElimNegActionPerformed(evt);
            }
        });

        jbDesfazer.setText("Desfazer");
        jbDesfazer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDesfazerActionPerformed(evt);
            }
        });

        jbHip.setBackground(new java.awt.Color(6, 158, 79));
        jbHip.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jbHip.setForeground(new java.awt.Color(255, 255, 255));
        jbHip.setText("<html><font weight='700'>Adicionar hipótese");
        jbHip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbHipActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpRegrasLayout = new javax.swing.GroupLayout(jpRegras);
        jpRegras.setLayout(jpRegrasLayout);
        jpRegrasLayout.setHorizontalGroup(
            jpRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRegrasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbDesfazer)
                    .addGroup(jpRegrasLayout.createSequentialGroup()
                        .addGroup(jpRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btElimConju, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(btIntroConju))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btIntroDisju, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(btElimDisju, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btElimImpl, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(btIntroImpl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btElimNeg, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(btIntroNeg))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbHip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addContainerGap(234, Short.MAX_VALUE))
        );
        jpRegrasLayout.setVerticalGroup(
            jpRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpRegrasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbHip)
                    .addComponent(btIntroImpl, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btIntroConju, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btIntroDisju, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btIntroNeg))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpRegrasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btElimConju, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btElimDisju, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btElimImpl, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btElimNeg, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbDesfazer, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        cardRegras.add(jpRegras, "cartaoBotoes");

        jpConfigRegra.setBackground(new java.awt.Color(255, 255, 255));
        jpConfigRegra.setPreferredSize(new java.awt.Dimension(720, 300));

        jLabel5.setText("Selecione as linhas para aplicar a regra");

        jbCancelarRegra.setText("Cancelar");
        jbCancelarRegra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarRegraActionPerformed(evt);
            }
        });

        jlNomeRegra.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jlNomeRegra.setText("<nome>");

        jlLinhasSelecionadas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jlLinhasSelecionadas.setText("<selecionadas>");

        jbAplicarRegra.setBackground(new java.awt.Color(6, 158, 79));
        jbAplicarRegra.setForeground(new java.awt.Color(255, 255, 255));
        jbAplicarRegra.setText("Aplicar");
        jbAplicarRegra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAplicarRegraActionPerformed(evt);
            }
        });

        jbLimparLinhas.setText("Limpar");
        jbLimparLinhas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimparLinhasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpConfigRegraLayout = new javax.swing.GroupLayout(jpConfigRegra);
        jpConfigRegra.setLayout(jpConfigRegraLayout);
        jpConfigRegraLayout.setHorizontalGroup(
            jpConfigRegraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConfigRegraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConfigRegraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlLinhasSelecionadas, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpConfigRegraLayout.createSequentialGroup()
                        .addComponent(jbAplicarRegra, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbLimparLinhas, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbCancelarRegra, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jpConfigRegraLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(4, 4, 4)
                        .addComponent(jlNomeRegra)))
                .addContainerGap())
        );
        jpConfigRegraLayout.setVerticalGroup(
            jpConfigRegraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConfigRegraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConfigRegraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jlNomeRegra))
                .addGap(17, 17, 17)
                .addComponent(jlLinhasSelecionadas, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpConfigRegraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbAplicarRegra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbLimparLinhas, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(jbCancelarRegra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        cardRegras.add(jpConfigRegra, "cartaoLinhas");

        jLabel6.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        jLabel6.setText("Você concluiu esta atividade!");

        jbProxAtiv.setBackground(new java.awt.Color(6, 158, 79));
        jbProxAtiv.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jbProxAtiv.setForeground(new java.awt.Color(255, 255, 255));
        jbProxAtiv.setText("Próxima atividade");
        jbProxAtiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbProxAtivActionPerformed(evt);
            }
        });

        jbGravarSolucao.setText("Gravar solução");
        jbGravarSolucao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGravarSolucaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpConcluidoLayout = new javax.swing.GroupLayout(jpConcluido);
        jpConcluido.setLayout(jpConcluidoLayout);
        jpConcluidoLayout.setHorizontalGroup(
            jpConcluidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConcluidoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpConcluidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbProxAtiv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(133, 133, 133)
                .addComponent(jbGravarSolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(111, Short.MAX_VALUE))
        );
        jpConcluidoLayout.setVerticalGroup(
            jpConcluidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpConcluidoLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 91, Short.MAX_VALUE)
                .addGroup(jpConcluidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbGravarSolucao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbProxAtiv, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addContainerGap())
        );

        cardRegras.add(jpConcluido, "cartaoConcluido");

        jpEsquerdo.add(cardRegras);

        jpGeral.add(jpEsquerdo);

        jpFeedback.setBackground(new java.awt.Color(255, 255, 255));
        jpFeedback.setPreferredSize(new java.awt.Dimension(580, 797));
        jpFeedback.setRequestFocusEnabled(false);

        jpFeedbackContainer.setBackground(new java.awt.Color(255, 255, 255));
        jpFeedbackContainer.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(222, 226, 230), 1, true));

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 20)); // NOI18N
        jLabel4.setText("Feedback");

        jbRevisar.setBackground(new java.awt.Color(6, 158, 79));
        jbRevisar.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jbRevisar.setForeground(new java.awt.Color(255, 255, 255));
        jbRevisar.setText("Revisar material");
        jbRevisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRevisarActionPerformed(evt);
            }
        });

        jbAjuda.setBackground(new java.awt.Color(6, 158, 79));
        jbAjuda.setFont(new java.awt.Font("Roboto", 0, 16)); // NOI18N
        jbAjuda.setForeground(new java.awt.Color(255, 255, 255));
        jbAjuda.setText("Solicitar ajuda");
        jbAjuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAjudaActionPerformed(evt);
            }
        });

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(180, 600));

        jpListaFeedback.setBackground(new java.awt.Color(255, 255, 255));
        jpListaFeedback.setMaximumSize(new java.awt.Dimension(277, 32767));

        javax.swing.GroupLayout jpListaFeedbackLayout = new javax.swing.GroupLayout(jpListaFeedback);
        jpListaFeedback.setLayout(jpListaFeedbackLayout);
        jpListaFeedbackLayout.setHorizontalGroup(
            jpListaFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );
        jpListaFeedbackLayout.setVerticalGroup(
            jpListaFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 627, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(jpListaFeedback);

        javax.swing.GroupLayout jpFeedbackContainerLayout = new javax.swing.GroupLayout(jpFeedbackContainer);
        jpFeedbackContainer.setLayout(jpFeedbackContainerLayout);
        jpFeedbackContainerLayout.setHorizontalGroup(
            jpFeedbackContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFeedbackContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpFeedbackContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpFeedbackContainerLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpFeedbackContainerLayout.createSequentialGroup()
                        .addGroup(jpFeedbackContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbRevisar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                            .addComponent(jbAjuda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jpFeedbackContainerLayout.setVerticalGroup(
            jpFeedbackContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFeedbackContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbAjuda, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbRevisar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jpFeedbackLayout = new javax.swing.GroupLayout(jpFeedback);
        jpFeedback.setLayout(jpFeedbackLayout);
        jpFeedbackLayout.setHorizontalGroup(
            jpFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFeedbackLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpFeedbackContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpFeedbackLayout.setVerticalGroup(
            jpFeedbackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFeedbackLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpFeedbackContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jpGeral.add(jpFeedback);

        jmMenuSuperior.setBackground(new java.awt.Color(6, 158, 79));
        jmMenuSuperior.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(6, 158, 79), 3, true));
        jmMenuSuperior.setForeground(new java.awt.Color(255, 255, 255));

        jmArquivo.setForeground(new java.awt.Color(255, 255, 255));
        jmArquivo.setText("Arquivo");

        miNovo.setText("Nova prova");
        jmArquivo.add(miNovo);

        miAbrir.setText("Exportar perfil");
        jmArquivo.add(miAbrir);

        miSalvar.setText("Importar perfil");
        jmArquivo.add(miSalvar);
        jmArquivo.add(jSeparator1);

        miSair.setText("Sair");
        miSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSairActionPerformed(evt);
            }
        });
        jmArquivo.add(miSair);

        jmMenuSuperior.add(jmArquivo);

        jmConfig.setForeground(new java.awt.Color(255, 255, 255));
        jmConfig.setText("Configurações");

        jMenuItem1.setText("Ver domínio");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jmConfig.add(jMenuItem1);

        jmSistemaProva.setText("Sistema de prova");

        bgSistemaProva.add(miProposicional);
        miProposicional.setSelected(true);
        miProposicional.setText("Lógica proposicional");
        jmSistemaProva.add(miProposicional);

        bgSistemaProva.add(miPredicaodos);
        miPredicaodos.setText("Lógica de predicados");
        jmSistemaProva.add(miPredicaodos);

        jmConfig.add(jmSistemaProva);

        jmMenuSuperior.add(jmConfig);

        jmAjuda.setForeground(new java.awt.Color(255, 255, 255));
        jmAjuda.setText("Ajuda");

        miGuia.setText("Guia do usuário");
        jmAjuda.add(miGuia);

        miSobre.setText("Sobre");
        miSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSobreActionPerformed(evt);
            }
        });
        jmAjuda.add(miSobre);

        jmMenuSuperior.add(jmAjuda);

        setJMenuBar(jmMenuSuperior);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jpGeral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jpGeral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
        
    private void btIntroConjuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIntroConjuActionPerformed
        
        regraAtual = Regra.INTRO_CONJ;
        jlNomeRegra.setText("<html><font face='Roboto'>∧<sub>i</sub></font></html>");
        selecionarFormulas(2);
        
    }//GEN-LAST:event_btIntroConjuActionPerformed
    
    private void miSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSobreActionPerformed
        
        new jfSobre().setVisible(true);
        
    }//GEN-LAST:event_miSobreActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        new jfDominio(this).setVisible(true);
        hide();
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jbCancelarRegraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarRegraActionPerformed
        
        fecharConfig();
        
    }//GEN-LAST:event_jbCancelarRegraActionPerformed

    private void jbLimparLinhasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimparLinhasActionPerformed
        
        limparLinhas();
        
    }//GEN-LAST:event_jbLimparLinhasActionPerformed

    private void jbAplicarRegraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAplicarRegraActionPerformed
        
        // Regras de 2 ou 3 fórmulas
        switch(regraAtual) {
            case INTRO_CONJ: introConj(); break;
            case ELIM_IMPL: elimImpl(); break;
            case INTRO_IMPL: introImpl(); break;
            case INTRO_NEG: introNeg(); break;
            case INTRO_DISJ: introDisj(); break;
            case ELIM_DISJ: elimDisj(); break;
        }
        
    }//GEN-LAST:event_jbAplicarRegraActionPerformed

    private void jbAjudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAjudaActionPerformed
       
        contAjudas++;

        new jfApoio("ajuda").setVisible(true);
        
    }//GEN-LAST:event_jbAjudaActionPerformed

    private void jbDesfazerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDesfazerActionPerformed
        
        boolean podeDesfazer = true;
        int ultimaLinha = jtResolucao.getRowCount()-1;
        
        // Verifica se a última regra não é premissa
        String ultimaRegra = jtResolucao.getValueAt(ultimaLinha, 2).toString();
        if(ultimaRegra.compareTo("Hipótese") == 0) {
            hipLevel--;
        }
        else if(ultimaRegra.contains("→<sub>i") || ultimaRegra.contains("¬<sub>i")) {
            hipLevel++;
        }
        else if(ultimaRegra.compareTo("Premissa") == 0) {
            podeDesfazer = false;
            novoFeedback("Não é possível desfazer.");
        }
        
        // Desfaz a última regra, se permitido
        if(podeDesfazer) {
            DefaultTableModel dtm = (DefaultTableModel) jtResolucao.getModel();
            dtm.removeRow(ultimaLinha);
            contAjudas++;
        }
        
    }//GEN-LAST:event_jbDesfazerActionPerformed

    private void btElimConjuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btElimConjuActionPerformed
        
        regraAtual = Regra.ELIM_CONJ;
        jlNomeRegra.setText("<html><font face='Roboto'>∧<sub>e</sub></font></html>");
        selecionarFormulas(1);
        
    }//GEN-LAST:event_btElimConjuActionPerformed

    private void jbHipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbHipActionPerformed
       
        JTextField tfHipotese = new JTextField();
        final JComponent[] inputs = new JComponent[] {
            new JLabel("Hipótese: "), 
            tfHipotese, 
            new JLabel("<html><br>Legenda:<br>"
                    + ">: implicação<br>"
                    + "+: disjunção<br>"
                    + "*: conjunção<br>"
                    + "~: negação")
        };
        int result = JOptionPane.showConfirmDialog(null, inputs, "Adicionar hipótese", JOptionPane.PLAIN_MESSAGE);
        
        if (result == JOptionPane.OK_OPTION) {
            String hip = tfHipotese.getText();
            hipLevel++;
            hip = Exercicio.formatarParserParaLegivel(hip);
            if(isHipoteseValida(hip))
                novaLinha(hip, "Hipótese");
            else
                System.out.println("Hipótese inválida.");
        }
        
    }//GEN-LAST:event_jbHipActionPerformed

    private void btIntroImplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIntroImplActionPerformed

        // Restrição da regra
        if(hipLevel <= 0) {
            novoFeedback("É preciso iniciar uma hipótese para utilizar esta regra!");
            contAjudas++;
            return;
        }
        
        regraAtual = Regra.INTRO_IMPL;
        jlNomeRegra.setText("<html><font face='Roboto'>→<sub>i</sub></font></html>");
        selecionarFormulas(2);
        
    }//GEN-LAST:event_btIntroImplActionPerformed

    private void btElimImplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btElimImplActionPerformed
        
        regraAtual = Regra.ELIM_IMPL;
        jlNomeRegra.setText("<html><font face='Roboto'>→<sub>e</sub></font></html>");
        selecionarFormulas(2);
        
    }//GEN-LAST:event_btElimImplActionPerformed

    private void btElimNegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btElimNegActionPerformed
        
        regraAtual = Regra.ELIM_NEG;
        jlNomeRegra.setText("<html><font face='Roboto'>¬<sub>e</sub></font></html>");
        selecionarFormulas(1);
        
    }//GEN-LAST:event_btElimNegActionPerformed

    private void btIntroNegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIntroNegActionPerformed
        
        // Restrição da regra
        if(hipLevel <= 0) {
            novoFeedback("É preciso iniciar uma hipótese para utilizar esta regra!");
            contAjudas++;
            return;
        }
        
        regraAtual = Regra.INTRO_NEG;
        jlNomeRegra.setText("<html><font face='Roboto'>¬<sub>i</sub></font></html>");
        selecionarFormulas(2);
        
    }//GEN-LAST:event_btIntroNegActionPerformed

    private void btIntroDisjuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIntroDisjuActionPerformed
        
        regraAtual = Regra.INTRO_DISJ;
        jlNomeRegra.setText("<html><font face='Roboto'>∨<sub>i</sub></font></html>");
        selecionarFormulas(2);
        
    }//GEN-LAST:event_btIntroDisjuActionPerformed

    private void btElimDisjuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btElimDisjuActionPerformed
        
        regraAtual = Regra.ELIM_DISJ;
        jlNomeRegra.setText("<html><font face='Roboto>∨<sub>e</sub></font></html>");
        selecionarFormulas(3);
        
    }//GEN-LAST:event_btElimDisjuActionPerformed

    private void miSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSairActionPerformed
        
        System.exit(0);
        
    }//GEN-LAST:event_miSairActionPerformed

    private void jbProxAtivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbProxAtivActionPerformed
        
        // Salva nota do exercício atual
        salvarNota();
        
        // Carrega próximo exercício
        novoExercicio();
        
    }//GEN-LAST:event_jbProxAtivActionPerformed

    private void jbRevisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRevisarActionPerformed
        
        contAjudas++;
        new jfApoio("apoio").setVisible(true);
        
    }//GEN-LAST:event_jbRevisarActionPerformed

    private void jbGravarSolucaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGravarSolucaoActionPerformed
        
        try {
            gravarSolucao();
        } catch (SQLException ex) {
            Logger.getLogger(jfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jbGravarSolucaoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgSistemaProva;
    private javax.swing.JButton btElimConju;
    private javax.swing.JButton btElimDisju;
    private javax.swing.JButton btElimImpl;
    private javax.swing.JButton btElimNeg;
    private javax.swing.JButton btIntroConju;
    private javax.swing.JButton btIntroDisju;
    private javax.swing.JButton btIntroImpl;
    private javax.swing.JButton btIntroNeg;
    private javax.swing.JPanel cardRegras;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JButton jbAjuda;
    private javax.swing.JButton jbAplicarRegra;
    private javax.swing.JButton jbCancelarRegra;
    private javax.swing.JButton jbDesfazer;
    private javax.swing.JButton jbGravarSolucao;
    private javax.swing.JButton jbHip;
    private javax.swing.JButton jbLimparLinhas;
    private javax.swing.JButton jbProxAtiv;
    private javax.swing.JButton jbRevisar;
    private javax.swing.JLabel jlAtivAtual;
    private javax.swing.JLabel jlLinhasSelecionadas;
    private javax.swing.JLabel jlNomeRegra;
    private javax.swing.JMenu jmAjuda;
    private javax.swing.JMenu jmArquivo;
    private javax.swing.JMenu jmConfig;
    private javax.swing.JMenuBar jmMenuSuperior;
    private javax.swing.JMenu jmSistemaProva;
    private javax.swing.JPanel jpAtividade;
    private javax.swing.JPanel jpConcluido;
    private javax.swing.JPanel jpConfigRegra;
    private javax.swing.JPanel jpEsquerdo;
    private javax.swing.JPanel jpFeedback;
    private javax.swing.JPanel jpFeedbackContainer;
    private javax.swing.JPanel jpGeral;
    private javax.swing.JPanel jpListaFeedback;
    private javax.swing.JPanel jpRegras;
    private javax.swing.JPanel jpResolucao;
    private javax.swing.JTable jtResolucao;
    private javax.swing.JMenuItem miAbrir;
    private javax.swing.JMenuItem miGuia;
    private javax.swing.JMenuItem miNovo;
    private javax.swing.JRadioButtonMenuItem miPredicaodos;
    private javax.swing.JRadioButtonMenuItem miProposicional;
    private javax.swing.JMenuItem miSair;
    private javax.swing.JMenuItem miSalvar;
    private javax.swing.JMenuItem miSobre;
    // End of variables declaration//GEN-END:variables

    // Variáveis da sessão
    private Atividade ativ = new Atividade();
    private AtividadeDAO ativ_dao = new AtividadeDAO();
    private Perfil perfil = new Perfil();
    private int contAjudas;         // Utilizado para gerar a nota do aluno
    
    // Variáveis da aplicação de regras
    private String textoLinhas;     // Imprime as linhas que foram selecionadas
    private int contLinhas;         // Quantidades de linhas já selecionadas
    private int[] linhasSelec;      // Índices das linhas selecionadas
    private int hipLevel = 0;       // Contador de níveis de hipóteses
    private Regra regraAtual;       // Registra qual regra foi selecionada
    private String respostaFinal;   // Armazena a conclusão
    
    enum Regra {
        INTRO_CONJ,
        ELIM_CONJ,
        INTRO_DISJ,
        ELIM_DISJ,
        INTRO_IMPL,
        ELIM_IMPL,
        INTRO_NEG,
        ELIM_NEG
    }
    
    private ListSelectionListener tableListener;
    
    // Funções internas
    
    private void limparLinhas() {
        jtResolucao.getSelectionModel().removeListSelectionListener(tableListener);
        
        textoLinhas = "<html>";
        jlLinhasSelecionadas.setText(textoLinhas);
        contLinhas = 0;
        jtResolucao.clearSelection();
        
        jbAplicarRegra.setEnabled(false);
        jbLimparLinhas.setEnabled(false);
        
        jtResolucao.getSelectionModel().addListSelectionListener(tableListener);
    }
    
    private void fecharConfig() {
        limparLinhas();
        jtResolucao.getSelectionModel().removeListSelectionListener(tableListener);
        
        CardLayout cl = (CardLayout) cardRegras.getLayout();
        cl.show(cardRegras, "cartaoBotoes");
        
        regraAtual = null;
    }
    
    private void novoFeedback(String mensagem) {
        ImageIcon image = new ImageIcon(System.getProperty("user.dir") + "\\src\\img\\icon_info.png");
        JLabel novaMensagem = new JLabel("<html><div WIDTH='245' style='margin:7'>"+mensagem, image, JLabel.LEFT);
        jpListaFeedback.add(novaMensagem);
        jpListaFeedback.revalidate();
        jpListaFeedback.repaint();
    }
    
    private void selecionarFormulas(final int numFormulas) {
        // Configura texto das linhas selecionadas
        textoLinhas = "<html>";
        jlLinhasSelecionadas.setText(textoLinhas);
        contLinhas = 0;
        jtResolucao.clearSelection();
        linhasSelec = new int[numFormulas];
        
        // Muda para a aba de selecionar linhas
       CardLayout cl = (CardLayout) cardRegras.getLayout();
        cl.show(cardRegras, "cartaoLinhas");
        
        // Verifica a seleção de linhas na tabela
        tableListener = new ListSelectionListener(){
            @Override
            public void valueChanged(ListSelectionEvent event) {
                if(!event.getValueIsAdjusting() && contLinhas < numFormulas) { // evita eventos duplicados
                    
                    if(isHipoteseEncerrada(jtResolucao.getSelectedRow())) {
                        novoFeedback("Não é possível utilizar fórmulas de uma hipótese encerrada.");
                        contAjudas++;
                    }
                    // Adiciona a linha selecionada à lista
                    else {
                        // Adiciona texto aos labels
                        String col1 = jtResolucao.getValueAt(jtResolucao.getSelectedRow(), 0).toString();
                        String col2 = jtResolucao.getValueAt(jtResolucao.getSelectedRow(), 1).toString();
                        textoLinhas = textoLinhas + col1 + " " + col2 + "<br>";
                        jlLinhasSelecionadas.setText(textoLinhas);
                        // Adiciona índice ao array
                        linhasSelec[contLinhas] = jtResolucao.getSelectedRow();
                        contLinhas++;
                        
                        jbLimparLinhas.setEnabled(true);
                        
                        // Se a regra for de uma fórmula, aplica automaticamente
                        // Se for de duas fórmulas ou mais, ativa o botão aplicar
                        if(contLinhas >= numFormulas) {
                            if(numFormulas == 1) {
                                switch(regraAtual) {
                                    case ELIM_CONJ: elimConj(); break;
                                    case ELIM_NEG: elimNeg(); break;
                                }
                            }
                            else
                                jbAplicarRegra.setEnabled(true);
                        } //end if(contLinhas >= numFormulas)
                    } //end if(isHipoteseEncerrada(jtResolucao.getSelectedRow())) else
                } //end if(!event.getValueIsAdjusting() && contLinhas < numFormulas)
            } //end valueChanged(ListSelectionEvent event)
        };
        
        jtResolucao.getSelectionModel().addListSelectionListener(tableListener);
    }
    
    private void novaLinha(String formula, String col3) {
        String col1 = jtResolucao.getRowCount()+1 + ".";
        
        String col2 = formula;
        
        // Adiciona níveis de hipótese
        for(int i = 0; i < hipLevel; i++)
            col2 = "| ".concat(col2);
        
        col2 = "<html>".concat(col2);
        
        DefaultTableModel dtm = (DefaultTableModel) jtResolucao.getModel();
        dtm.addRow(new Object[]{col1, col2, col3});
        
        // Verifica se chegou à conclusão
        if(hipLevel == 0) {
            String formulaComp = ExpressionTree.getFullNode(formula);
            String respostaComp = ExpressionTree.getFullNode(respostaFinal);
            if(formulaComp.compareTo(respostaComp)==0) {
                respostaCorreta();
            }
            else {
                fecharConfig();
            }
        }
        else {
            fecharConfig();
        }
    }
    
    private boolean isHipoteseEncerrada(int linhaSelec) {
        
        // Verifica o nível da hipótese
        String formulaSelec = jtResolucao.getValueAt(linhaSelec, 1).toString();
        int hipLevelAnterior = (formulaSelec.length() - formulaSelec.replace("| ", "").length()) / "| ".length();
        
        int linhaAtual = jtResolucao.getRowCount()-1;
        
        int contQuedas = 0;
        
        for(int i = linhaSelec+1; i <= linhaAtual; i++) {
            String formulaProx = jtResolucao.getValueAt(i, 1).toString();
            int hipLevelProx = (formulaProx.length() - formulaProx.replace("| ", "").length()) / "| ".length();
            if(hipLevelProx > hipLevelAnterior)
                contQuedas++;
            else if(hipLevelProx < hipLevelAnterior)
                contQuedas--;
            
            if(contQuedas < 0)
                return true;
            else
                hipLevelAnterior = hipLevelProx;
        }
        
        return false;
    }
    
    private boolean isHipoteseValida(String hip) {
        
        // Validar String vazia
        if ("".equals(hip))
            return false;
        // Validar mais de um caracter por variável
        
        // Validar símbolo $
        else if(hip.contains("$"))
            return false;
        else
            return true;
        
    }
    
    private void salvarNota() {
        
        Tutor.notaExercicio(ativ, contAjudas);
        
    }
    
    private void gravarSolucao() throws SQLException {
        
        String solucao = ""; // armazena a solução no formato do BD
        int numLinhas = jtResolucao.getRowCount(); // equivale a dificuldade
        int complex1=0, complex2=0, complex3=0, complex4=0;
        int complex5=0, complex6=0, complex7=0, complex8=0;
        
        // Lê as linhas da tabela e monta a solução
        for(int i = 0; i < numLinhas; i++) {
            String formula = (String)jtResolucao.getValueAt(i, 2);
            String part = "";
            
            // Se for dentro da hipótese, não adiciona na solução

            if(!formula.contains("Premissa") && solucao.compareTo("")!=0) {
                part=";";
            }

            if(formula.contains("<html>∧<sub>i</sub>")) {
                part = part.concat("1,");
                part = part.concat(formula.substring(formula.lastIndexOf("</sub>")+6));
                part = part.replaceAll("\\s+",""); //remove espaços
                complex1++;
            }
            else if(formula.contains("<html>∧<sub>e</sub>")) {
                part = part.concat("2,");
                part = part.concat(formula.substring(formula.lastIndexOf("</sub>")+6));
                part = part.replaceAll("\\s+",""); //remove espaços
                complex2++;
            }
            else if(formula.contains("<html>∨<sub>i</sub>")) {
                part = part.concat("3,");
                part = part.concat(formula.substring(formula.lastIndexOf("</sub>")+6));
                part = part.replaceAll("\\s+",""); //remove espaços
                complex3++;
            }
            else if(formula.contains("<html>∨<sub>e</sub>")) {
                part = part.concat("4,");
                part = part.concat(formula.substring(formula.lastIndexOf("</sub>")+6));
                part = part.replaceAll("\\s+",""); //remove espaços
                complex4++;
            }
            else if(formula.contains("<html>→<sub>i</sub>")) {
                part = part.concat("5,");
                part = part.concat(formula.substring(formula.lastIndexOf("</sub>")+6));
                part = part.replaceAll("\\s+",""); //remove espaços
                part = part.replaceAll("-",",");
                complex5++;
            }
            else if(formula.contains("<html>→<sub>e</sub>")) {
                part = part.concat("6,");
                part = part.concat(formula.substring(formula.lastIndexOf("</sub>")+6));
                part = part.replaceAll("\\s+",""); //remove espaços
                complex6++;
            }
            else if(formula.contains("<html>¬<sub>i</sub>")) {
                part = part.concat("7,");
                part = part.concat(formula.substring(formula.lastIndexOf("</sub>")+6));
                part = part.replaceAll("\\s+",""); //remove espaços
                part = part.replaceAll("-",",");
                complex7++;
            }
            else if(formula.contains("<html>¬<sub>e</sub>")) {
                part = part.concat("8,");
                part = part.concat(formula.substring(formula.lastIndexOf("</sub>")+6));
                part = part.replaceAll("\\s+",""); //remove espaços
                complex8++;
            }
            else if(formula.contains("Hipótese")) {
                part = part.concat("H{");

                String hipPart = (String)jtResolucao.getValueAt(i, 1);
                hipPart = Exercicio.limpaFormula(hipPart);
                hipPart = Exercicio.formatarLegivelParaParser(hipPart);

                part = part.concat(hipPart);
                part = part.replaceAll("\\s+",""); //remove espaços
                part = part.concat("}");
            }

            solucao = solucao.concat(part);

        }
        
        //System.out.println("Solução: " + solucao);
        
        // Grava solução no BD
        Solucao sol = new Solucao();
        sol.setSequencia(solucao);
        sol.setAtividade(ativ);
        sol.setDificuldade(numLinhas);
        
        SolucaoDAO sol_dao = new SolucaoDAO();
        sol_dao.adicionar(sol);
        
        // Adiciona complexidade ao BD
        Complexidade complex = new Complexidade();
        ComplexidadeDAO complex_dao = new ComplexidadeDAO();
        complex.setAtividade(ativ);
        if(complex1 > 0) {
            complex.setCod_conceito(1);
            complex.setValor(complex1);
            complex_dao.adicionar(complex);
        }
        if(complex2 > 0) {
            complex.setCod_conceito(2);
            complex.setValor(complex2);
            complex_dao.adicionar(complex);
        }
        if(complex3 > 0) {
            complex.setCod_conceito(3);
            complex.setValor(complex3);
            complex_dao.adicionar(complex);
        }
        if(complex4 > 0) {
            complex.setCod_conceito(4);
            complex.setValor(complex4);
            complex_dao.adicionar(complex);
        }
        if(complex5 > 0) {
            complex.setCod_conceito(5);
            complex.setValor(complex5);
            complex_dao.adicionar(complex);
        }
        if(complex6 > 0) {
            complex.setCod_conceito(6);
            complex.setValor(complex6);
            complex_dao.adicionar(complex);
        }
        if(complex7 > 0) {
            complex.setCod_conceito(7);
            complex.setValor(complex7);
            complex_dao.adicionar(complex);
        }
        if(complex8 > 0) {
            complex.setCod_conceito(8);
            complex.setValor(complex8);
            complex_dao.adicionar(complex);
        }
        
        
    }

    /* Carrega o próximo exercício */
    private void novoExercicio() {
        
        contAjudas = 0;
        
        // Fechar configuração
        limparLinhas();
        jtResolucao.getSelectionModel().removeListSelectionListener(tableListener);
        regraAtual = null;
        CardLayout cl = (CardLayout) cardRegras.getLayout();
        cl.show(cardRegras, "cartaoBotoes");
        
        // Limpar tabela
        DefaultTableModel model = (DefaultTableModel) jtResolucao.getModel();
        model.setRowCount(0);

        // Limpar feedback
        
        // Seleciona a atividade a ser mostrada
        ativ = Tutor.proxAtividade();
        
        // Formata a fórmula da atividade para ser exibida
        String exercicio = ativ.getPremissas() + " |- " + ativ.getConclusao();
        exercicio = Exercicio.formatarFormula(exercicio);
        jlAtivAtual.setText("<html><font face='Roboto'>"+exercicio);
        respostaFinal = Exercicio.formatarFormula(ativ.getConclusao());
        
        // Mostra as premissas da atividade na resolução
        String premissas[] = Exercicio.getPremissas(exercicio);
        DefaultTableModel dtm = (DefaultTableModel) jtResolucao.getModel();
        
        int i = 0;
        for (String s : premissas) {
            dtm.addRow(new Object[]{++i + ".", "<html>"+s, "Premissa"});
        }
    }
    
    private void respostaCorreta() {
        
        JOptionPane.showMessageDialog(null, "Você chegou à resposta final!");
        
        // Muda para a aba de exercício concluído
        CardLayout cl = (CardLayout) cardRegras.getLayout();
        cl.show(cardRegras, "cartaoConcluido");
        
    }
    
    // Funções das regras
    private void introConj() {
        
        // Introdução da conjunção
        String col2;
        String col3 = "<html>∧<sub>i</sub> " + (linhasSelec[0]+1) + ", " + (linhasSelec[1]+1) + "";
        
        String arg1 = Exercicio.limpaFormula(jtResolucao.getValueAt(linhasSelec[0], 1).toString());
        String arg2 = Exercicio.limpaFormula(jtResolucao.getValueAt(linhasSelec[1], 1).toString());

        // Verifica se são contrários
        if(arg1.compareTo("¬"+arg2) == 0 | arg2.compareTo("¬"+arg1) == 0) {
            novaLinha("⊥", col3);
            return;
        }
        
        if(arg1.length() == 1)
            col2 = arg1;
        else
            col2 = "(" + arg1 + ")";
        
        if(arg2.length() == 1)
            col2 = col2.concat(" ∧ " + arg2);
        else
            col2 = col2.concat(" ∧ (" + arg2 + ")");
        
        novaLinha(col2, col3);
    }
    
    private void elimConj() {
        boolean regraValida;
        String col3 = "<html>∧<sub>e</sub> " + (linhasSelec[0]+1) + "";
        
        // Lê a fórumula e verifica se é uma conjunção
        String formula = jtResolucao.getValueAt(linhasSelec[0], 1).toString();
        String raiz = ExpressionTree.getRootString(formula);
        regraValida = raiz.compareTo("*") == 0;
        
        if(regraValida) {
            // Separa os elementos da conjunção
            String opt1 = Exercicio.limpaFormula(Exercicio.formatarParserParaLegivel(ExpressionTree.getLeftNode(formula)));
            String opt2 = Exercicio.limpaFormula(Exercicio.formatarParserParaLegivel(ExpressionTree.getRightNode(formula)));
            
            Object[] options = { opt1 , opt2 };

            // Seleciona um dos elementos
            JPanel panel = new JPanel();
            panel.add(new JLabel("Escolha uma das fórmulas para utilizar:"));

            int result = JOptionPane.showOptionDialog(null, panel, "Selecionar resultado",
                    JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, options, null);
            if (result == JOptionPane.YES_OPTION)
                novaLinha(opt1, col3);
            else if (result == JOptionPane.NO_OPTION)
                novaLinha(opt2, col3);
        }
        else {
            novoFeedback("Esta regra só pode ser aplicada em uma conjunção.");
            contAjudas++;
            fecharConfig();
        }
    }
    
    private void elimImpl() {
        
        boolean regraImplicacao, regraAntecedente = false;
        String col3 = "<html>→<sub>e</sub> " + (linhasSelec[0]+1) + ", " + (linhasSelec[1]+1) + "";
        
        // Verifica se uma das fórmulas é implicação
        // Lê a fórumula e verifica se é uma conjunção
        String formula1 = jtResolucao.getValueAt(linhasSelec[0], 1).toString();
        String formula2 = jtResolucao.getValueAt(linhasSelec[1], 1).toString();
        String raiz1 = ExpressionTree.getRootString(formula1);
        String raiz2 = ExpressionTree.getRootString(formula2);
        byte posicaoImpl = 0;
        if (raiz1.compareTo(">") == 0)
            posicaoImpl = 1;
        if (raiz2.compareTo(">") == 0)
            posicaoImpl = 2;
        regraImplicacao = (posicaoImpl > 0);
       
        String antecedente, outra;
        // Verifica se uma das fórmulas é o antecedente
        if(posicaoImpl == 1) {
            // Pega o antecedente da primeira e compara com a segunda
            antecedente = Exercicio.formatarParserParaLegivel(ExpressionTree.getLeftNode(formula1));
            outra = Exercicio.formatarParserParaLegivel(ExpressionTree.getFullNode(formula2));
            if(antecedente.compareTo(outra) == 0)
                regraAntecedente = true;
        }
        else if (posicaoImpl == 2) {
            // Pega o antecedente da segunda e compara com a primeira
            antecedente = Exercicio.formatarParserParaLegivel(ExpressionTree.getLeftNode(formula2));
            outra = Exercicio.formatarParserParaLegivel(ExpressionTree.getFullNode(formula1));
            if(antecedente.compareTo(outra) == 0)
                regraAntecedente = true;
        }
        
        if(regraImplicacao && regraAntecedente) {
            String col2;
            if(posicaoImpl == 1)
                col2 = Exercicio.formatarParserParaLegivel(ExpressionTree.getRightNode(formula1));
            else
                col2 = Exercicio.formatarParserParaLegivel(ExpressionTree.getRightNode(formula2));
            novaLinha(col2, col3);
        }
        else if(!regraImplicacao) {
            novoFeedback("Uma das fórmulas precisa ser uma implicação!");
            contAjudas++;
            fecharConfig();
        }
        else {
            novoFeedback("Para eliminar uma implicação, uma das fórmulas deve ser seu antecedente!");
            contAjudas++;
            fecharConfig();
        }
    }
    
    private void introImpl() {
        
        String col3 = "<html>→<sub>i</sub> " + (linhasSelec[0]+1) + "-" + (linhasSelec[1]+1);
        
        // Verifica se as regras selecionadas estão na última hipótese
        String formula1 = jtResolucao.getValueAt(linhasSelec[0], 1).toString();
        String formula2 = jtResolucao.getValueAt(linhasSelec[1], 1).toString();
        
        int contNivelFormula1 = (formula1.length() - formula1.replace("| ", "").length()) / "| ".length();
        int contNivelFormula2 = (formula2.length() - formula2.replace("| ", "").length()) / "| ".length();

        if(contNivelFormula1 != hipLevel || contNivelFormula2 != hipLevel) {
            novoFeedback("As fórmulas selecionadas devem estar na última hipótese.");
            contAjudas++;
            fecharConfig();
        }
        else {
            String tipoRegra1 = jtResolucao.getValueAt(linhasSelec[0], 2).toString();
            // Verifica se é a primeira da hipótese
            if(tipoRegra1.compareTo("Hipótese") != 0) {
                novoFeedback("A primeira fórmula precisa ser o início da hipótese.");
                contAjudas++;
                fecharConfig();
            }
            else {
                //Aplica a regra
                hipLevel--;
                novaLinha("("+Exercicio.limpaFormula(formula1)+") → ("+Exercicio.limpaFormula(formula2)+")", col3);
            }
        }
    }
    
    private void elimNeg() {
        String formula = jtResolucao.getValueAt(linhasSelec[0], 1).toString();
        formula = Exercicio.limpaFormula(formula);

        //Verifica se a raiz e o ramo direito são negação
        String raiz;
        String raizDireita;
        String formulaDireita;
        
        if(formula.length() > 1) {
            raiz = ExpressionTree.getRootString(formula);
            formulaDireita = ExpressionTree.getRightNode(formula);
            raizDireita = ExpressionTree.getRootString(formulaDireita);

            if(raiz.compareTo("~")==0 && raizDireita.compareTo("~")==0) {
                String col3 = "<html>¬<sub>e</sub> " + (linhasSelec[0]+1);
                String resultado = ExpressionTree.getRightNode(formulaDireita);
                novaLinha(resultado, col3);
            }
            else {
                novoFeedback("Esta regra deve ser aplicada na dupla negação.");
                contAjudas++;
                fecharConfig();
            }
        }
        else {
            novoFeedback("Esta regra deve ser aplicada na dupla negação.");
            contAjudas++;
            fecharConfig();
        }
        
    }
    
    private void introNeg() {
        
        String formula1 = jtResolucao.getValueAt(linhasSelec[0], 1).toString();
        String formula2 = jtResolucao.getValueAt(linhasSelec[1], 1).toString();
        
        // Verifica se as regras selecionadas estão na última hipótese
        int contNivelFormula1 = (formula1.length() - formula1.replace("| ", "").length()) / "| ".length();
        int contNivelFormula2 = (formula2.length() - formula2.replace("| ", "").length()) / "| ".length();

        if(contNivelFormula1 != hipLevel || contNivelFormula2 != hipLevel) {
            novoFeedback("As fórmulas selecionadas devem estar na última hipótese.");
            contAjudas++;
            fecharConfig();
        }
        else {
            // Verifica se é a primeira da hipótese
            String tipoRegra1 = jtResolucao.getValueAt(linhasSelec[0], 2).toString();
            if(tipoRegra1.compareTo("Hipótese") != 0) {
                novoFeedback("A primeira fórmula precisa ser o início da hipótese.");
                contAjudas++;
                fecharConfig();
            }
            else {
                formula2 = Exercicio.limpaFormula(formula2);
                // Verifica se a segunda é a contradição
                if(formula2.compareTo("⊥") != 0) {
                    novoFeedback("A segunda fórmula precisa ser uma contradição.");
                    contAjudas++;
                    fecharConfig();
                }
                else {
                    // Aplica regra
                    hipLevel--;
                    String col3 = "<html>¬<sub>i</sub> " + (linhasSelec[0]+1) + "-" + (linhasSelec[1]+1);
                    novaLinha("¬("+Exercicio.limpaFormula(formula1)+")", col3);
                }
            }
        }
    }
    
    private void introDisj() {
        
        // Introdução da conjunção
        String col2;
        String col3 = "<html>∨<sub>i</sub> " + (linhasSelec[0]+1) + ", " + (linhasSelec[1]+1) + "";
        
        String arg1 = Exercicio.limpaFormula(jtResolucao.getValueAt(linhasSelec[0], 1).toString());
        String arg2 = Exercicio.limpaFormula(jtResolucao.getValueAt(linhasSelec[1], 1).toString());

        if(arg1.length() == 1)
            col2 = arg1;
        else
            col2 = "(" + arg1 + ")";
        
        if(arg2.length() == 1)
            col2 = col2.concat(" ∨ " + arg2);
        else
            col2 = col2.concat(" ∨ (" + arg2 + ")");
        
        novaLinha(col2, col3);
    }
    
    private void elimDisj() {
        
        String col3 = "<html>∨<sub>e</sub> " + (linhasSelec[0]+1) + ", " + (linhasSelec[1]+1) + ", " + (linhasSelec[2]+1);
        String formula1 = jtResolucao.getValueAt(linhasSelec[0], 1).toString();
        String formula2 = jtResolucao.getValueAt(linhasSelec[1], 1).toString();
        String formula3 = jtResolucao.getValueAt(linhasSelec[2], 1).toString();
        
        // Verifica se uma das regras é disjunção
        // Guarda os dois lados da disjunção
         boolean regraDisjuncao, duasImpl;
        
        String raiz1 = ExpressionTree.getRootString(formula1);
        String raiz2 = ExpressionTree.getRootString(formula2);
        String raiz3 = ExpressionTree.getRootString(formula3);
        String disjEsq = null, disjDir = null;
        String outra1 = null, outra2 = null;
        String raizOutra1 = null, raizOutra2 = null;
        byte posicaoDisj = 0;
        if (raiz1.compareTo("+") == 0) {
            posicaoDisj = 1;
            disjEsq = Exercicio.formatarParserParaLegivel(ExpressionTree.getLeftNode(formula1));
            disjDir = Exercicio.formatarParserParaLegivel(ExpressionTree.getRightNode(formula1));
            outra1 = Exercicio.formatarParserParaLegivel(ExpressionTree.getFullNode(formula2));
            outra2 = Exercicio.formatarParserParaLegivel(ExpressionTree.getFullNode(formula3));
            raizOutra1 = raiz2;
            raizOutra2 = raiz3;
        }
        if (raiz2.compareTo("+") == 0) {
            posicaoDisj = 2;
            disjEsq = Exercicio.formatarParserParaLegivel(ExpressionTree.getLeftNode(formula2));
            disjDir = Exercicio.formatarParserParaLegivel(ExpressionTree.getRightNode(formula2));
            outra1 = Exercicio.formatarParserParaLegivel(ExpressionTree.getFullNode(formula1));
            outra2 = Exercicio.formatarParserParaLegivel(ExpressionTree.getFullNode(formula3));
            raizOutra1 = raiz1;
            raizOutra2 = raiz3;
        }
        if (raiz3.compareTo("+") == 0) {
            posicaoDisj = 3;
            disjEsq = Exercicio.formatarParserParaLegivel(ExpressionTree.getLeftNode(formula3));
            disjDir = Exercicio.formatarParserParaLegivel(ExpressionTree.getRightNode(formula3));
            outra1 = Exercicio.formatarParserParaLegivel(ExpressionTree.getFullNode(formula1));
            outra2 = Exercicio.formatarParserParaLegivel(ExpressionTree.getFullNode(formula2));
            raizOutra1 = raiz1;
            raizOutra2 = raiz2;
        }
        regraDisjuncao = (posicaoDisj > 0);
        
        if(regraDisjuncao) {
            duasImpl = (raizOutra1.compareTo(">")==0 && raizOutra2.compareTo(">")==0);
            if(duasImpl) {
                // Compara se os lados da disjunção são os antecedentes das implicações
                String antecedente1 = Exercicio.formatarParserParaLegivel(ExpressionTree.getLeftNode(outra1));
                String antecedente2 = Exercicio.formatarParserParaLegivel(ExpressionTree.getLeftNode(outra2));

                boolean esqIgual, dirIgual;
                esqIgual = (disjEsq.compareTo(antecedente1)==0 || disjEsq.compareTo(antecedente2)==0);
                dirIgual = (disjDir.compareTo(antecedente1)==0 || disjDir.compareTo(antecedente2)==0);

                // Compara se o consequente das implicações é igual
                String consequente1 = Exercicio.formatarParserParaLegivel(ExpressionTree.getRightNode(outra1));
                String consequente2 = Exercicio.formatarParserParaLegivel(ExpressionTree.getRightNode(outra2));

                boolean conseqIgual = (consequente1.compareTo(consequente2)==0);

                // Aplica, se for o caso
                if(esqIgual && dirIgual && conseqIgual) {
                    novaLinha(Exercicio.limpaFormula(consequente1), col3);
                }
                else {
                    // As regras não fecham
                    novoFeedback("Não é possível aplicar a eliminação da disjunção com as regras selecionadas.");
                    contAjudas++;
                    fecharConfig();
                }
            }
            else {
                // Não tem duas implicações
                novoFeedback("É necessário uma conjunção e duas implicações.");
                contAjudas++;
                fecharConfig();
            }
        }
        else {
            novoFeedback("Uma das fórmulas precisa ser uma disjunção.");
            contAjudas++;
            fecharConfig();
        }
    }
    
}
